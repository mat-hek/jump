-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


@package jump
@version 0.1.0.0

module Utils
(|>) :: a -> (a -> b) -> b
infixl 5 |>

module WSHelper.Internal

-- | Represents websocket action.
data WSAction
Send :: Connection -> Text -> WSAction

-- | Handles websocket event. Accepts MVar containing state and event
--   handeler Executes event handler and returned <a>WSAction</a>s, updates
--   state
handleEvent :: MVar s -> (s -> ([WSAction], s)) -> IO ()

-- | Handles websocket message. Accepts <a>MVar</a> containing state and
--   message handeler Executes message handler and returned
--   <a>WSAction</a>s, updates state
class MessageHandler s a
handleMessage :: MessageHandler s a => Connection -> MVar s -> a -> IO ()

-- | Keeps receiving and ignoring messages. Prevents from disconnecting
--   client.
dumbReceive :: Connection -> MVar s -> IO ()

-- | Executes <a>WSAction</a>
handleWSAction :: WSAction -> IO ()
instance WSHelper.Internal.MessageHandler s (Data.Text.Internal.Text -> s -> ([WSHelper.Internal.WSAction], s))
instance WSHelper.Internal.MessageHandler s (Data.Text.Internal.Text -> s -> [WSHelper.Internal.WSAction])


-- | Module containing helper functions to separate IO functions from
--   non-IO ones
module WSHelper

-- | Represents websocket action.
data WSAction
Send :: Connection -> Text -> WSAction

-- | Handles websocket event. Accepts MVar containing state and event
--   handeler Executes event handler and returned <a>WSAction</a>s, updates
--   state
handleEvent :: MVar s -> (s -> ([WSAction], s)) -> IO ()
handleMessage :: MessageHandler s a => Connection -> MVar s -> a -> IO ()

-- | Keeps receiving and ignoring messages. Prevents from disconnecting
--   client.
dumbReceive :: Connection -> MVar s -> IO ()

module MotionDetector.Internal

-- | Represents user motion
data Motion
Undetected :: Motion
Stopped :: Motion
Running :: Motion
Jumping :: Motion

-- | State of detector
data MDState
MDState :: Motion -> MotionPosition -> Int -> Double -> Double -> MotionScaler -> MDState
[motion] :: MDState -> Motion
[position] :: MDState -> MotionPosition
[lastChange] :: MDState -> Int
[lastx] :: MDState -> Double
[jumpIgnore] :: MDState -> Double
[scaler] :: MDState -> MotionScaler
initMDState :: MDState

-- | Represents accelerometer data
data Acceleration
Acceleration :: Double -> Double -> Double -> Double -> Double -> Double -> Acceleration
[accx] :: Acceleration -> Double
[accy] :: Acceleration -> Double
[accz] :: Acceleration -> Double
[rota] :: Acceleration -> Double
[rotb] :: Acceleration -> Double
[rotg] :: Acceleration -> Double
zeroAcceleration :: Acceleration

-- | Detects motion given detector state and acceleration Returns tuple of
--   decected motion and new detector state
detectMotion :: MDState -> Acceleration -> (Motion, MDState)
data MotionPosition
Top :: MotionPosition
Bottom :: MotionPosition
None :: MotionPosition
data MotionScaler
MotionScaler :: Double -> [Double] -> MotionScaler
[zeroLvl] :: MotionScaler -> Double
[motions] :: MotionScaler -> [Double]
initMotionScaler :: MotionScaler
doDetectMotion :: MDState -> Acceleration -> MDState
rescale :: MotionScaler -> Acceleration -> (Bool, MotionScaler)
instance GHC.Show.Show MotionDetector.Internal.MDState
instance GHC.Classes.Eq MotionDetector.Internal.MDState
instance GHC.Show.Show MotionDetector.Internal.MotionScaler
instance GHC.Classes.Eq MotionDetector.Internal.MotionScaler
instance GHC.Show.Show MotionDetector.Internal.MotionPosition
instance GHC.Classes.Eq MotionDetector.Internal.MotionPosition
instance GHC.Show.Show MotionDetector.Internal.Acceleration
instance GHC.Classes.Eq MotionDetector.Internal.Acceleration
instance GHC.Show.Show MotionDetector.Internal.Motion
instance GHC.Classes.Eq MotionDetector.Internal.Motion


-- | Module responsible for recognizing motion basing on accelerometer data
module MotionDetector

-- | Represents user motion
data Motion
Undetected :: Motion
Stopped :: Motion
Running :: Motion
Jumping :: Motion

-- | State of detector
data MDState
MDState :: Motion -> MotionPosition -> Int -> Double -> Double -> MotionScaler -> MDState
initMDState :: MDState

-- | Represents accelerometer data
data Acceleration
Acceleration :: Double -> Double -> Double -> Double -> Double -> Double -> Acceleration

-- | Detects motion given detector state and acceleration Returns tuple of
--   decected motion and new detector state
detectMotion :: MDState -> Acceleration -> (Motion, MDState)

module WSServer.Internal
data ServerState
ServerState :: Maybe Connection -> Maybe Connection -> Maybe Connection -> MDState -> Motion -> ServerState
[sender] :: ServerState -> Maybe Connection
[receiver] :: ServerState -> Maybe Connection
[debugger] :: ServerState -> Maybe Connection
[detectorState] :: ServerState -> MDState
[motion] :: ServerState -> Motion
initialServerState :: ServerState
run :: String -> Int -> IO ()
application :: MVar ServerState -> ServerApp
handleAcceleration :: Text -> ServerState -> ([WSAction], ServerState)
parseAcceleration :: Text -> Maybe Acceleration
serializeMotion :: Motion -> Text

module WSServer
run :: String -> Int -> IO ()

module HttpServer
run :: Int -> IO ()
